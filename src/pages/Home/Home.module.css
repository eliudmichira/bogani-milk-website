/* Biosphere Ecosystem Styles */
.biosphereEcosystem { /* Converted to camelCase for CSS Modules convention */
  position: relative;
  overflow-x: hidden;
}

/* Organic shapes */
.organicBlob { /* Converted */
  border-radius: 60% 40% 70% 30% / 50% 60% 40% 50%;
  filter: blur(40px);
  opacity: 0.6;
  z-index: 0;
}

.microorganism { /* Kept as is, could be camelCased: .microOrganism */
  position: relative;
  transition: all 0.5s ease;
}

.microorganism:hover {
  transform: scale(1.05);
}

.probioticParticle { /* Converted */
  position: absolute;
  border-radius: 50%;
  background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.8), transparent);
  animation: float 8s infinite ease-in-out;
}

@keyframes float {
  0%, 100% { transform: translateY(0) rotate(0deg); }
  25% { transform: translateY(-10px) rotate(5deg); }
  50% { transform: translateY(5px) rotate(-3deg); }
  75% { transform: translateY(-5px) rotate(1deg); }
}

.ecosystemGrid { /* Converted */
  display: grid;
  position: relative;
  z-index: 1;
}

.fluidGradient { /* Converted */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0.7;
  overflow: hidden;
  z-index: 0;
}

.fluidGradient::before,
.fluidGradient::after {
  content: '';
  position: absolute;
  width: 300%;
  height: 300%;
  top: -100%;
  left: -100%;
  background: radial-gradient(circle at center, rgba(165, 214, 167, 0.4) 0%, rgba(129, 199, 132, 0.2) 30%, rgba(0, 0, 0, 0) 70%);
  animation: rotate 60s linear infinite;
}

.fluidGradient::after {
  width: 200%;
  height: 200%;
  top: -50%;
  left: -50%;
  background: radial-gradient(circle at center, rgba(100, 223, 223, 0.3) 0%, rgba(29, 233, 182, 0.1) 40%, rgba(0, 0, 0, 0) 70%);
  animation: rotate 40s linear infinite reverse;
}

/* Theme-dependent styles need careful handling.
   These will become global if not properly scoped or if Home.module.css is imported globally.
   If these .dark styles are meant to be conditional based on the theme state in Home.tsx,
   they should ideally be applied dynamically in the JSX or via a global theme class on a body/root element.
   For now, I'm including them but noting they might not work as expected with CSS Modules alone
   if the .dark class is on a parent element outside the component importing Home.module.css.
*/
:global(.dark) .fluidGradient::before { /* Made global for .dark context */
  background: radial-gradient(circle at center, rgba(79, 209, 197, 0.3) 0%, rgba(72, 187, 177, 0.1) 30%, rgba(0, 0, 0, 0) 70%);
}

:global(.dark) .fluidGradient::after { /* Made global for .dark context */
  background: radial-gradient(circle at center, rgba(72, 187, 177, 0.2) 0%, rgba(79, 209, 197, 0.1) 40%, rgba(0, 0, 0, 0) 70%);
}

@keyframes rotate {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.glassCard { /* Converted */
  position: relative;
  backdrop-filter: blur(8px);
  background-color: rgba(255, 255, 255, 0.7);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
  overflow: hidden;
}

:global(.dark) .glassCard { /* Made global for .dark context */
  background-color: rgba(30, 41, 59, 0.6);
  border: 1px solid rgba(30, 41, 59, 0.3);
}

.glassCard:hover {
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

:global(.dark) .glassCard:hover { /* Made global for .dark context */
  border: 1px solid rgba(79, 209, 197, 0.3);
}

/* Microbiome journey visualization */
.microbiomeJourney { /* Converted */
  position: relative;
  height: 400px;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.microbiomeNode { /* Converted */
  position: absolute;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  background: white;
  z-index: 2;
  transition: all 0.3s ease;
}

:global(.dark) .microbiomeNode { /* Made global for .dark context */
  background: rgba(30, 41, 59, 0.8);
}

.microbiomeNode:hover {
  transform: scale(1.1);
  z-index: 3;
}

.microbiomePath { /* Converted */
  position: absolute;
  overflow: visible;
  stroke-dasharray: 10;
  stroke-dashoffset: 1000;
  animation: draw 3s forwards ease-in-out;
}

/* These are global selectors and will affect elements outside Home.tsx if not careful.
   It's generally better to avoid global selectors in CSS Modules unless necessary.
   These might be better handled by a global CSS file or by applying classes directly.
*/
:global(#root > div > header:nth-child(2)) { /* Made global */
  display: none !important;
}

:global(main) { /* Made global */
  padding-top: 0;
}

@keyframes draw {
  to {
    stroke-dashoffset: 0;
  }
}

/* Product sphere styles */
.productSphere { /* Converted */
  position: relative;
  width: 100%;
  height: 400px;
  perspective: 800px;
}

.sphereContainer { /* Converted */
  position: absolute;
  width: 300px;
  height: 300px;
  left: 50%;
  top: 50%;
  transform-style: preserve-3d;
  transform: translate(-50%, -50%);
  animation: rotateSphere 30s infinite linear;
}

.sphereItem { /* Converted */
  position: absolute;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: white;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transform-style: preserve-3d;
  will-change: transform;
  transition: transform 0.3s ease;
}

:global(.dark) .sphereItem { /* Made global for .dark context */
  background: rgba(30, 41, 59, 0.8);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
}

.sphereItem:hover {
  transform: scale(1.2) translateZ(30px);
  z-index: 10;
}

@keyframes rotateSphere {
  0% { transform: translate(-50%, -50%) rotateY(0) rotateX(10deg); }
  100% { transform: translate(-50%, -50%) rotateY(360deg) rotateX(10deg); }
}
